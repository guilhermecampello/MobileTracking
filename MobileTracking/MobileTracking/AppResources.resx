<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Add" xml:space="preserve">
    <value>Adicionar</value>
  </data>
  <data name="Add position" xml:space="preserve">
    <value>Add position</value>
  </data>
  <data name="Add zone" xml:space="preserve">
    <value>Add zone</value>
  </data>
  <data name="Available" xml:space="preserve">
    <value>Available</value>
  </data>
  <data name="Back" xml:space="preserve">
    <value>Voltar</value>
  </data>
  <data name="Calibrate position" xml:space="preserve">
    <value>Calibrate position</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancelar</value>
  </data>
  <data name="Compiled data" xml:space="preserve">
    <value>Compiled data</value>
  </data>
  <data name="Configurations" xml:space="preserve">
    <value>Configurations</value>
  </data>
  <data name="Confirm delete position" xml:space="preserve">
    <value>Are you sure you want to delete position and all it's data ?</value>
  </data>
  <data name="Confirm delete zone" xml:space="preserve">
    <value>Are you sure you want to delete zone</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="Create new locale" xml:space="preserve">
    <value>Create new locale</value>
  </data>
  <data name="Current locale" xml:space="preserve">
    <value>Current locale</value>
  </data>
  <data name="Data aquisition" xml:space="preserve">
    <value>Data aquisition</value>
  </data>
  <data name="Data aquisition interval" xml:space="preserve">
    <value>Data aquisition interval</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="Delete position" xml:space="preserve">
    <value>Delete position</value>
  </data>
  <data name="Delete zone" xml:space="preserve">
    <value>Delete zone</value>
  </data>
  <data name="Deleted" xml:space="preserve">
    <value>Deleted</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit Hostname" xml:space="preserve">
    <value>Edit Hostname</value>
  </data>
  <data name="Edit interval" xml:space="preserve">
    <value>Edit data aquisition interval</value>
  </data>
  <data name="Edit samples" xml:space="preserve">
    <value>Edit samples per position</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Finding current locale" xml:space="preserve">
    <value>Finding current locale</value>
  </data>
  <data name="Floor" xml:space="preserve">
    <value>Floor</value>
  </data>
  <data name="Hostname" xml:space="preserve">
    <value>Hostname</value>
  </data>
  <data name="Interval" xml:space="preserve">
    <value>Interval</value>
  </data>
  <data name="Invalid Hostname" xml:space="preserve">
    <value>Invalid Hostname</value>
  </data>
  <data name="Locales" xml:space="preserve">
    <value>Locales</value>
  </data>
  <data name="Magnetic field" xml:space="preserve">
    <value>Magnetic field</value>
  </data>
  <data name="MeanStdDev" xml:space="preserve">
    <value>Mean and Std. Deviation</value>
  </data>
  <data name="Monitoring" xml:space="preserve">
    <value>Monitoring</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="No_zones_message" xml:space="preserve">
    <value>No zones configured. Add zones by clicking on the "+" icon.</value>
  </data>
  <data name="Position" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="Provide interval" xml:space="preserve">
    <value>Provide the interval between data aquisition in seconds</value>
  </data>
  <data name="Provide samples per position" xml:space="preserve">
    <value>Provide the number of samples you want to collect per position</value>
  </data>
  <data name="Samples per position" xml:space="preserve">
    <value>Samples per position</value>
  </data>
  <data name="Server not available" xml:space="preserve">
    <value>Server not available</value>
  </data>
  <data name="Start calibration" xml:space="preserve">
    <value>Start calibration</value>
  </data>
  <data name="Stop calibration" xml:space="preserve">
    <value>Stop calibration</value>
  </data>
  <data name="Unavailable" xml:space="preserve">
    <value>Unavailable</value>
  </data>
  <data name="Value must be a positive integer" xml:space="preserve">
    <value>Value must be a positive integer</value>
  </data>
  <data name="View data" xml:space="preserve">
    <value>View data</value>
  </data>
  <data name="Zone" xml:space="preserve">
    <value>Zone</value>
  </data>
</root>