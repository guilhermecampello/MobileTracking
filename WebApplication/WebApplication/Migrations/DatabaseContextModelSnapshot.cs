// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication.Infrastructure;

namespace WebApplication.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("WebApplication.Models.Calibration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignalType")
                        .HasColumnType("integer");

                    b.Property<float>("Strength")
                        .HasColumnType("real");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Calibrations");
                });

            modelBuilder.Entity("WebApplication.Models.Locale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<float>("Latitude")
                        .HasColumnType("real");

                    b.Property<float>("Longitude")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Locales");
                });

            modelBuilder.Entity("WebApplication.Models.LocalizationMeasurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignalType")
                        .HasColumnType("integer");

                    b.Property<float>("Strength")
                        .HasColumnType("real");

                    b.Property<int>("UserLocalizationId")
                        .HasColumnType("integer");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("UserLocalizationId");

                    b.ToTable("LocalizationMeasurements");
                });

            modelBuilder.Entity("WebApplication.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("XCoordinate")
                        .HasColumnType("real");

                    b.Property<float>("YCoordinate")
                        .HasColumnType("real");

                    b.Property<float>("ZCoordinate")
                        .HasColumnType("real");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("WebApplication.Models.PositionData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PositionId")
                        .HasColumnType("integer");

                    b.Property<string>("SignalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SignalType")
                        .HasColumnType("integer");

                    b.Property<float>("Strength")
                        .HasColumnType("real");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.Property<float>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("PositionsData");
                });

            modelBuilder.Entity("WebApplication.Models.UserLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CalculatedPositionId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CalculatedPositionId");

                    b.ToTable("UserLocalizations");
                });

            modelBuilder.Entity("WebApplication.Models.Zone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<int>("LocaleId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("WebApplication.Models.Calibration", b =>
                {
                    b.HasOne("WebApplication.Models.Position", null)
                        .WithMany("Calibrations")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.LocalizationMeasurement", b =>
                {
                    b.HasOne("WebApplication.Models.UserLocalization", null)
                        .WithMany("LocalizationMeasurements")
                        .HasForeignKey("UserLocalizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication.Models.Position", b =>
                {
                    b.HasOne("WebApplication.Models.Zone", "Zone")
                        .WithMany("Positions")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("WebApplication.Models.PositionData", b =>
                {
                    b.HasOne("WebApplication.Models.Position", "Position")
                        .WithMany("PositionData")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("WebApplication.Models.UserLocalization", b =>
                {
                    b.HasOne("WebApplication.Models.Position", "CalculatedPosition")
                        .WithMany()
                        .HasForeignKey("CalculatedPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculatedPosition");
                });

            modelBuilder.Entity("WebApplication.Models.Zone", b =>
                {
                    b.HasOne("WebApplication.Models.Locale", "Locale")
                        .WithMany("Zones")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Locale");
                });

            modelBuilder.Entity("WebApplication.Models.Locale", b =>
                {
                    b.Navigation("Zones");
                });

            modelBuilder.Entity("WebApplication.Models.Position", b =>
                {
                    b.Navigation("Calibrations");

                    b.Navigation("PositionData");
                });

            modelBuilder.Entity("WebApplication.Models.UserLocalization", b =>
                {
                    b.Navigation("LocalizationMeasurements");
                });

            modelBuilder.Entity("WebApplication.Models.Zone", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
